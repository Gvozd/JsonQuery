{
    "lex": {
        "rules": [
            ["(\\w|\\d)+", "return 'identity';"],
            [":root", "root"],
            ["\\s*>\\s*", "return '>';"],
            ["\\s+", "return 'space';"],
            ["\\.", "return '.';"],
            ["\\*", "return '*';"],
            ["\\s*,\\s*", "return 'comma';"],
            ["$", "return 'EOF';"]
        ]
    },

    "operators": [
        ["left", "comma"],
        ["left", " ", ">"],
        ["left", "."]
    ],
    "bnf": {
        "ruleset" :[
            [ "selector",   "return $1;"  ],
            [ "ruleset comma selector",   "return createUnionOr($1, $3);"],
            [ "ruleset EOF",   "return $1;"  ]
        ],
        "selector": [
            ["root", "$$ = createFilterRoot();"],
            ["simple_selector", "$$ = createDescendantUnion(createFilterRoot(), $1);"],
            ["selector space simple_selector", "$$ = createDescendantUnion($1, $3);"],
            ["selector > simple_selector", "$$ = createChildrenUnion($1, $3);"]
        ],
        "simple_selector" : [
            ["*", "$$ = 'createFilterAny()';"],
            ["identity", "$$ = createFilterType($1);"],
            [". identity", "$$ = createFilterName($2);"],
            ["simple_selector . identity", "$$ = createUnionAnd($1, createFilterName($3));"]
        ]
    }
}