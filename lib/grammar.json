{"lex": {
    "rules": [
        ["(\\w|\\d)+", "return 'identity';"],
        ["\"((?:\\w|\\d|\\\\\")+)\"", "yytext = this.matches[1].replace(/\\\\\"/g, '\"');return 'identity';"],
        ["'((?:\\w|\\d|\\\\')+)'", "yytext = this.matches[1].replace(/\\\\'/g, '\\'');return 'identity';"],
        [":root", "return 'root';"],
        [":first-child", "return 'first-child';"],
        [":last-child", "return 'last-child';"],
        [":nth-child\\((odd|even|-?\\d+|-?\\d*n(?=[+\\-]|\\))\\+?(-?\\d+)?)\\)", "return 'nth-child';"],
        [":nth-last-child\\((odd|even|-?\\d+|-?\\d*n(?=[+\\-]|\\))\\+?(-?\\d+)?)\\)", "return 'nth-last-child';"],
        ["\\s*>\\s*", "return '>';"],
        ["\\s+", "return 'space';"],
        ["\\.", "return '.';"],
        ["\\*", "return '*';"],
        ["\\s*,\\s*", "return 'comma';"],
        ["$", "return 'EOF';"]
    ]
}, "operators": [
    ["left", "comma"],
    ["left", " ", ">"],
    ["left", "."]
], "bnf": {
    "ruleset": [
        ["selector", "$$ = $1;"],
        ["ruleset comma selector", "$$ = createUnionOr($1, $3);"],
        ["ruleset EOF", "return $1;"]
    ],
    "selector": [
        ["simple_selector", "$$ = createUnionOr(createUnionAnd(createFilterRoot(),$1),createDescendantUnion(createFilterRoot(), $1));"],
        ["selector space simple_selector", "$$ = createDescendantUnion($1, $3);"],
        ["selector > simple_selector", "$$ = createChildrenUnion($1, $3);"]
    ],
    "simple_selector": [
        ["simple_selector simple_selector", "$$ = createUnionAnd($1, $2);"],
        ["*", "$$ = createFilterAny();"],
        ["identity", "$$ = createFilterType($1);"],
        [". identity", "$$ = createFilterName($2);"],
        ["root", "$$ = createFilterRoot();"],
        ["first-child", "$$ = createFilterFirstChild();"],
        ["last-child", "$$ = createFilterLastChild();"],
        ["nth-child", "$$ = createFilterNthChild($1);"],
        ["nth-last-child", "$$ = createFilterNthLastChild($1);"]
    ]
}}